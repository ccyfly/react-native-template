{
  "root": true,
  "settings": {
    "react": {
      "version": "16.13"
    },
    "import/parsers": {
      "@typescript-eslint/parser": [
        ".ts",
        ".tsx"
      ]
    },
    "import/resolver": {
      "typescript": {
        "alwaysTryTypes": true
      }
    }
  },
  "globals": {
    "browser": true
  },
  "env": {
    "browser": true,
    "es6": true
  },
  "extends": [
    "plugin:@typescript-eslint/recommended",
    "plugin:@typescript-eslint/recommended-requiring-type-checking",
    "plugin:react/recommended",
    "prettier"
  ],
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "project": "tsconfig.json",
    "sourceType": "module"
  },
  "ignorePatterns": [
    "node_modules/**",
    "@types/**",
    "**/__tests__/**",
    "*.config.js",
    "**/*.d.ts"
  ],
  "plugins": [
    "react",
    "eslint-plugin-import",
    "eslint-plugin-jsdoc",
    "eslint-plugin-prefer-arrow",
    "eslint-plugin-react",
    "@typescript-eslint",
    "simple-import-sort",
    "import-newlines",
    "newline-destructuring",
    "sort-destructure-keys"
  ],
  "rules": {
    "@typescript-eslint/array-type": [
      "error",
      {
        "default": "array"
      }
    ],
    "comma-spacing": [
      "error",
      {
        "before": false,
        "after": true
      }
    ],
    "@typescript-eslint/ban-types": [
      "error",
      {
        "types": {
          "Object": {
            "message": "Avoid using the `Object` type. Did you mean `object`?"
          },
          "Function": {
            "message": "Avoid using the `Function` type. Prefer a specific function type, like `() => void`."
          },
          "Boolean": {
            "message": "Avoid using the `Boolean` type. Did you mean `boolean`?"
          },
          "Number": {
            "message": "Avoid using the `Number` type. Did you mean `number`?"
          },
          "String": {
            "message": "Avoid using the `String` type. Did you mean `string`?"
          },
          "Symbol": {
            "message": "Avoid using the `Symbol` type. Did you mean `symbol`?"
          }
        }
      }
    ],
    "@typescript-eslint/dot-notation": "error",
    "@typescript-eslint/explicit-member-accessibility": [
      "off",
      {
        "accessibility": "explicit"
      }
    ],
    "@typescript-eslint/explicit-module-boundary-types": [
      "off",
      {
        "allowArgumentsExplicitlyTypedAsAny": true
      }
    ],
    "@typescript-eslint/indent": [
      "error",
      2,
      {
        "ignoredNodes": [
          "TSTypeParameterInstantiation"
        ],
        "SwitchCase": 1
      }
    ],
    "@typescript-eslint/member-delimiter-style": [
      "error",
      {
        "multiline": {
          "delimiter": "none",
          "requireLast": false
        },
        "singleline": {
          "delimiter": "semi",
          "requireLast": false
        }
      }
    ],
    "@typescript-eslint/no-explicit-any": "off",
    "@typescript-eslint/no-parameter-properties": "off",
    "@typescript-eslint/no-unnecessary-boolean-literal-compare": "error",
    "@typescript-eslint/no-unused-expressions": "error",
    "@typescript-eslint/no-unused-vars": "warn",
    "@typescript-eslint/no-unsafe-member-access": "warn",
    "@typescript-eslint/no-unsafe-argument": "warn",
    "@typescript-eslint/no-unsafe-assignment": "warn",
    "@typescript-eslint/no-unsafe-call": "warn",
    "@typescript-eslint/no-use-before-define": "off",
    // "@typescript-eslint/no-unsafe-return": "warn",
    "@typescript-eslint/prefer-for-of": "error",
    "@typescript-eslint/prefer-function-type": "error",
    "@typescript-eslint/quotes": [
      "error",
      "single",
      {
        "avoidEscape": true
      }
    ],
    "@typescript-eslint/no-empty-function": "off",
    "semi": "off",
    // "@typescript-eslint/semi": [
    //   "error",
    //   "always"
    // ],
    "@typescript-eslint/semi": [
      "error",
      "never"
    ],
    "@typescript-eslint/triple-slash-reference": [
      "error",
      {
        "path": "always",
        "types": "prefer-import",
        "lib": "always"
      }
    ],
    "@typescript-eslint/type-annotation-spacing": "off",
    "@typescript-eslint/unified-signatures": "error",
    "@typescript-eslint/interface-name-prefix": "off",
    "@typescript-eslint/no-inferrable-types": "off",
    "@typescript-eslint/no-shadow": [
      "error"
    ],
    "@typescript-eslint/naming-convention": [
      "error",
      {
        "selector": "default",
        "format": [
          "camelCase",
          "PascalCase"
        ]
      },
      {
        "selector": "variable",
        "format": [
          "camelCase",
          "PascalCase",
          "UPPER_CASE"
        ]
      },
      {
        "selector": "property",
        "format": [
          "camelCase",
          "PascalCase",
          "snake_case"
        ]
      },
      {
        "selector": "property",
        "modifiers": [
          "private"
        ],
        "format": [
          "camelCase",
          "PascalCase"
        ],
        "leadingUnderscore": "allow"
      },
      {
        "selector": "property",
        "modifiers": [
          "static"
        ],
        "format": [
          "camelCase",
          "PascalCase",
          "UPPER_CASE"
        ]
      },
      {
        "selector": "property",
        "modifiers": [
          "readonly"
        ],
        "format": [
          "camelCase",
          "PascalCase",
          "UPPER_CASE"
        ]
      },
      {
        "selector": "accessor",
        "modifiers": [
          "public"
        ],
        "format": [
          "camelCase",
          "PascalCase",
          "UPPER_CASE"
        ]
      },
      {
        "selector": "parameter",
        "format": [
          "camelCase"
        ],
        "leadingUnderscore": "allow"
      },
      {
        "selector": "memberLike",
        "modifiers": [
          "private"
        ],
        "format": [
          "camelCase",
          "PascalCase",
          "UPPER_CASE"
        ],
        "leadingUnderscore": "require"
      },
      {
        "selector": "enumMember",
        "format": [
          "camelCase",
          "PascalCase",
          "UPPER_CASE"
        ]
      },
      {
        "selector": "typeLike",
        "format": [
          "PascalCase"
        ]
      },
      {
        "selector": "interface",
        "format": [
          "StrictPascalCase"
        ],
        "leadingUnderscore": "allow",
        "prefix": [
          "I"
        ]
      }
    ],
    "arrow-parens": [
      "off",
      "always"
    ],
    "brace-style": [
      "off",
      "off"
    ],
    "comma-dangle": [
      "error",
      "always-multiline"
    ],
    "complexity": "off",
    "constructor-super": "error",
    "curly": [
      "error",
      "multi-line"
    ],
    "eol-last": "error",
    "eqeqeq": [
      "error",
      "smart"
    ],
    "guard-for-in": "error",
    "id-blacklist": "off",
    "id-match": "off",
    "jsdoc/check-alignment": "error",
    "jsdoc/check-indentation": "error",
    "jsdoc/newline-after-description": "error",
    "jsx-quotes": [
      "error",
      "prefer-double"
    ],
    "linebreak-style": "off",
    "max-classes-per-file": [
      "error",
      1
    ],
    "max-len": "off",
    "new-parens": "off",
    "newline-per-chained-call": "error",
    "no-bitwise": "error",
    "no-caller": "error",
    "no-cond-assign": "error",
    "no-console": "warn",
    "no-debugger": "error",
    "no-duplicate-imports": "error",
    "no-empty": "error",
    "no-eval": "error",
    "no-extra-semi": "off",
    "no-fallthrough": "off",
    "no-invalid-this": "off",
    "no-irregular-whitespace": "off",
    "no-multiple-empty-lines": "error",
    "no-new-wrappers": "error",
    "no-shadow": "off",
    "no-throw-literal": "error",
    "no-trailing-spaces": "error",
    "no-undef-init": "error",
    "no-underscore-dangle": "off",
    "no-unsafe-finally": "error",
    "no-unused-labels": "error",
    "object-shorthand": "off",
    "one-var": [
      "error",
      "never"
    ],
    // "newline-before-return": "error",
    "padding-line-between-statements": [
      "error",
      {
        "blankLine": "always",
        "prev": "*",
        "next": "return"
      }
    ],
    "prefer-arrow/prefer-arrow-functions": "error",
    "prefer-template": "off",
    "quote-props": [
      "error",
      "as-needed"
    ],
    "radix": "error",
    "react/jsx-boolean-value": "error",
    "react/jsx-curly-spacing": "off",
    "react/jsx-equals-spacing": "off",
    "react/jsx-key": "error",
    "react/jsx-no-bind": [
      1,
      {
        "ignoreRefs": true,
        "allowBind": false,
        "allowArrowFunctions": true
      }
    ],
    "react/jsx-wrap-multilines": "off",
    "react/jsx-closing-bracket-location": [
      1,
      "tag-aligned"
    ],
    "array-bracket-newline": [
      "error",
      {
        "multiline": true,
        "minItems": 3
      }
    ],
    "array-element-newline": [
      "error",
      {
        "ArrayExpression": "consistent",
        "ArrayPattern": {
          "minItems": 3
        }
      }
    ],
    "object-curly-newline": [
      "error",
      {
        "ObjectExpression": {
          "multiline": true,
          "minProperties": 1,
          "consistent": false
        },
        "ObjectPattern": {
          "multiline": true,
          "minProperties": 5,
          "consistent": false
        },
        "ImportDeclaration": {
          "multiline": true,
          "minProperties": 5,
          "consistent": false
        },
        // "ImportDeclaration": "always",
        "ExportDeclaration": {
          "multiline": true,
          "minProperties": 3,
          "consistent": true
        }
      }
    ],
    "object-curly-spacing": [
      "error",
      "always"
    ],
    "object-property-newline": [
      "error"
    ],
    "function-call-argument-newline": [
      "error",
      "consistent"
    ],
    "simple-import-sort/imports": "error",
    "simple-import-sort/exports": "error",
    "import-newlines/enforce": [
      "error",
      4
    ],
    "newline-destructuring/newline": [
      "error",
      {
        "items": 3
      }
    ],
    "sort-destructure-keys/sort-destructure-keys": [
      "error",
      {
        "caseSensitive": false
      }
    ],
    "space-before-function-paren": [
      "error",
      {
        "anonymous": "always",
        "named": "never"
      }
    ],
    "space-in-parens": [
      "off",
      "never"
    ],
    "spaced-comment": [
      "error",
      "always",
      {
        "markers": [
          "/"
        ]
      }
    ],
    "use-isnan": "error",
    "valid-typeof": "off"
  },
  "overrides": [
    // {
    //   "files": ["./app/*.ts*"],
    //   "rules": {
    //     "imports": [
    //       "error",
    //       {
    //         "groups": [
    //           // Node.js builtins. You could also generate this regex if you use a `.js` config.
    //           // For example: `^(${require("module").builtinModules.join("|")})(/|$)`
    //           [
    //             "^(assert|buffer|child_process|cluster|console|constants|crypto|dgram|dns|domain|events|fs|http|https|module|net|os|path|punycode|querystring|readline|repl|stream|string_decoder|sys|timers|tls|tty|url|util|vm|zlib|freelist|v8|process|async_hooks|http2|perf_hooks)(/.*|$)",
    //           ],
    //           // Packages. `react` related packages come first.
    //           ["^react", "^@?\\w"],
    //           // Internal packages.
    //           ["^(@|@company|@ui|components|utils|config|vendored-lib)(/.*|$)"],
    //           // Side effect imports.
    //           ["^\\u0000"],
    //           // Parent imports. Put `..` last.
    //           ["^\\.\\.(?!/?$)", "^\\.\\./?$"],
    //           // Other relative imports. Put same-folder imports and `.` last.
    //           ["^\\./(?=.*/)(?!/?$)", "^\\.(?!/?$)", "^\\./?$"],
    //           // Style imports.
    //           ["^.+\\.s?css$"],
    //         ],
    //       },
    //     ],
    //   },
    // }
  ]
}